plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'jacoco'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id "io.sentry.android.gradle" version "4.6.0"
    id 'androidx.navigation.safeargs.kotlin'
}

sentry {
    org.set("home-vo7")
    projectName.set("android")
}
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = file("$buildDir/reports/coverage")
}

android {
    namespace 'com.example.empty'
    compileSdk 34

    signingConfigs {
        common {
            keyAlias "123456"
            keyPassword "123456"
            storeFile file("common.jks")
            storePassword "123456"
        }
    }

    defaultConfig {
        applicationId "com.example.empty"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.empty.CustomTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.common
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        // Enabled test coverage to generate jacoco test report.
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packagingOptions {
        excludes += '/META-INF/{AL2.0,LGPL2.1}'
    }
    lint {
        warningsAsErrors = true
        baseline file("lint-baseline.xml")
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}
dependencies {
    implementation 'io.sentry:sentry-android:7.9.0'
    implementation 'io.sentry:sentry-compose-android:7.9.0'

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3

    def room_version = "2.6.1"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"


    implementation libs.core.ktx
    implementation "androidx.navigation:navigation-compose:2.7.7"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation "com.google.dagger:hilt-android:2.50"
    kapt "com.google.dagger:hilt-compiler:2.50"

    testImplementation libs.junit
    testImplementation 'org.robolectric:robolectric:4.12.2'
    testImplementation "androidx.room:room-testing:$room_version"

//    testImplementation 'com.google.dagger:hilt-android-testing:2.50'
//    kaptTest 'com.google.dagger:hilt-android-compiler:2.50'

    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.50'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.50'
    androidTestImplementation "androidx.navigation:navigation-testing:2.7.7"
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4

    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}

kapt {
    correctErrorTypes true
}

task jacocoCombinedTestReports(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {

    reports {
        html.required = true
        xml.required = true
    }

    classDirectories.from = fileTree(project.buildDir) {
        include(
                "**/intermediates/classes/debug/**",
                "**/tmp/kotlin-classes/debug/**"
        )
        exclude(
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                "**/*Application.*",
                '**/Manifest*.*',
                '**/*Test*.*',
                '**/android/**/*.*',
                '**/androidx/**/*.*',
                '**/airbnb/**/*.*',
                "**/di/**/*.*",
                '**/*Dagger*.*',
                "**/*Screen*"
        )
    }

    sourceDirectories.from = fileTree(
            dir: project.projectDir,
            includes: [
                    "src/main/java/**",
                    "src/main/kotlin/**"
            ]
    )

    executionData.from = fileTree(
            dir: buildDir,
            includes: [
//                    "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
"outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
            ]
    )
}
